* TODO
  - ( ) finish fullstack_app to be generated by the cli
  -- (x) Make sure that i can connect to a database
  -- (x) Finish the framework cli as well.
  -- (x) Make sure that the api is working thorough swagger 
  --- (x) Get current 
  --- (x) Find User
  --- (x) Chage profile picture
  --- (x) Login
  --- (x) Signup User
  ----  (x) Run migration to add default uuid id 
  --- (x) Signup Admin User
  --- (x) Kill User
  --- (x) Delete me 
  --- (x) GetProfilePicture
  -- (x) S3 Service
  --- (x) implement upload
  --- (x) implement get
  -- ( ) Test framework_cli 
  --- (=) also update the cli with better descriptions and final please!
  --- (x) egg env
  --- (x) egg -e something
  --- (=) migrate
  --- (=) up 
  --- (=) down 
  --- (x) generate
  --- (x) bump
  --- (x) version
  --- (x) swagger 
  ---- (x) first implement the swag init command. and then exit
  ---- (x) when using the `swag init` command the command generates a document into `~/git/fullstack_app/docs/swagger.json` and i think i want to load in the json into the openapi-generator-cli 
  ---- (x) then use the cli to generate the the api into typscript into a directory in the configuration file.
  ---- (x) so add in the api dir as a configuration option
  -- ( ) Update the config so that everything is not just under server. 
  --- ( ) Database, 
  --- ( ) Redis, 
  --- ( ) S3,
  -- ( ) Fix the Github workflows so that it will work with secrets and testing
  -- ( ) Create a decent frontend templates just index.html and showcase what can be done 
  --- (-) Solid
  --- (=) React  
  --- (=) Svelte 
  --- (=) THAT stack (templ, htmx, alpinejs, tailwindcss) 
  -- (=) Redis Service
  - ( ) Some niceities
  -- ( ) Make IService interface and just take a ServiceParams for some quasi~dependency injection
  -- (=) Make a build option
  -- (=) Make `.egg/` directory and use that as the configuration point
  --- (=) Alter the `cmd/configuration/LoadConfiguration(environment string)` function load from the `.egg/configuration/`
  --- (=) Alter the `egg_app db generate` to use the configuration file in the `.egg`
  - ( ) Make `egg_cli`
  -- ( ) create the templates for the framework during generation
  -- ( ) use bubble tea and cobra to make the tui
  - ( ) create a guide and a wiki for egg_cli
  -- ( ) create a guide on how to get started
  -- ( ) create an explaination for the architechture
  --- ( ) controllers
  --- ( ) configuration
  --- ( ) services
  --- ( ) framework cli 
  - ( ) publish

** Signup request
   @code json
    {
       "email": "adam.kalilarosa@proton.me",
       "isAdmin": true,
       "password": "ThisIsAPassword667!",
       "username": "kalilarosa"
   }
   @end

** Login 
   @code json
   {
       "email": "adam.kalilarosa@proton.me",
       "password": "ThisIsAPassword667!",
       "username": ""
   }
   @end

   @code json
   {
       "email": "adam.kalilarosa@proton.me",
       "password": "ThisIsAPassword667!",
       "username": ""
   }
   @end


** Register 
   What I want to is to have an IService interface 
   @code go
   type IService interface {
       Promote(Configuration *configuration.Configuration) error
   }
   @end
