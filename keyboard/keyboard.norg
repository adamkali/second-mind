* Notes on the keyboard

** AVR pro micro controller to adafruit KB_2040
  first we hndle the imports. This is part of the code is where we translate from the passed in values. below in the `AdamKeyboard.__init__()`
@code python
from kmk.kmk_keyboard import KMKKeyboard
from kmk.quickpin.pro_micro.avr_promicro import translate as avr
@end

which we can see below: 
   @code python
   # kmk.quickpin.pro_micro.avr_promicro.py
translate = {
      'D3': 0,
    'D2': 1,
    'D1': 4,
    'D0': 5,
    'D4': 6,
    'C6': 7,
    'D7': 8,
    'E6': 9,
    'B4': 10,
    'B5': 11,
    'B6': 12,
    'B2': 13,
    'B3': 14,
    'B1': 15,
    'F7': 16,
    'F6': 17,
    'F5': 18,
    'F4': 19,
}
@end
   this will be dealt with in the next line as: 
  @code python
    from kmk.quickpin.pro_micro.kb2040 import pinout as pins
    from kmk.scanners import DiodeOrientation
   @end
   And here `pins` is what is being used for the actual translation layer shown here:
   @code python
# kmk.quickpin.pro_micro.kb2040.py
import board 

pinout = [
    board.D0,        #  
    board.D1,#
    None,  # GND #
    None,  # GND #
    board.D2,    #
    board.D3,#
    board.D4,#
    board.D5,#
    board.D6,#
    board.D7,#
    board.D8,#
board.D9,#
    board.D10,#
    board.MOSI,#
    board.MISO,#
    board.SCK,#
    board.A0,#
    board.A1,#
    board.A2,# 
    board.A3,#
    None,  # 3.3 #v
    None,  # RST #
    None,  # GND #
    None,  # RAW #
]
  @end

** assign the translation layers 
   as we can see above we can notice that there it is pretty trivial to do the conversion when refrencing the pog json.  our known columns: 
   @code python
   row_pins= (
       board.A2, #  F5
       board.A1, #  F6
       board.A0, #  F7
       board.CLK, # B1
       board.MISO,# B3
       board.MOSI,# B2
   )
   col_pins= (
       board.D2, #  D1
       board.D3, #  D0 
       board.D4, #  D4
       board.D5, #  C6
       board.D6, #  D7
       board.D7, #  E6
   )
   @end

   so using these instead we can get pretty easily we can just us the board directly intead of using the translation layer instead 

   @code python
   import board # since we will only need this now 
   class KMKKeyboard(_KMKKeyboard):
       def __init__(self):
           super().__init__()

   row_pins= (
       board.A2, #  F5
       board.A1, #  F6
       board.A0, #  F7
       board.CLK, # B1
       board.MISO,# B3
       board.MOSI,# B2
   )
   col_pins= (
       board.D2, #  D1
       board.D3, #  D0 
       board.D4, #  D4
       board.D5, #  C6
       board.D6, #  D7
       board.D7, #  E6
   )

@end

   @code python
   self.diode_orientation = DiodeOrientation.COLUMNS
   self.data_pin = board.RX
   @end

   @code python
   #fmt: off
   self.coord_mapping = [
       0,  1,  2,  3,  4,  5,                      36, 37, 38, 39, 40, 41,
       6,  7,  8,  9,  10, 11,                     42, 43, 44, 45, 46, 47,
       12, 13, 14, 15, 16, 17,                     48, 49, 50, 51, 52, 53,
       18, 19, 20, 21, 22, 23, 29, 35,     66, 60, 54, 55, 56, 57, 58, 59,
       24, 25, 26, 27, 28,         34,     67,         61, 62, 63, 64, 65,
       31, 32, 33,     68, 69, 70
   ]
   # fmt: on
   @end
   now we can even take a looksie daisy to what we want to see see how our wiring works out with it before we go on with the configuring 


** Testing the hard wiring 
   Now to test the wiring I think it it would be helpful just to steal the guides work from kmk: 
   @code python
   from kb import KMKKeyboard

    from kmk.keys import KC
    from kmk.modules.holdtap import HoldTap
   from kmk.modules.layers import Layers
   from kmk.modules.split import Split

   keyboard = KMKKeyboard()

   keyboard.modules.append(Layers())
   keyboard.modules.append(HoldTap())

   split = Split(
       data_pin=keyboard.data_pin,
       # data_pin2=keyboard.data_pin2,
   )
   keyboard.modules.append(split)

   L1_SPC = KC.LT(1, KC.SPC)
   L2_ENT = KC.LT(2, KC.ENT)
   S_BSPC = KC.HT(KC.BSPC, KC.LSFT)
   C_DEL = KC.HT(KC.DEL, KC.LCTL)
   M_END = KC.HT(KC.END, KC.MEH)
   H_PGDN = KC.HT(KC.PGDN, KC.HYPER)

   # fmt:off
   keyboard.keymap = [
       [   #0
        KC.ESC,    KC.N1,  KC.N2,   KC.N3,   KC.N4,  KC.N5,                                         KC.N6, KC.N7,   KC.N8,   KC.N9,   KC.N0,  KC.GRV,
        KC.TAB,     KC.Q,   KC.W,    KC.E,    KC.R,   KC.T,                                          KC.Y,  KC.U,    KC.I,    KC.O,    KC.P, KC.BSLS,
        KC.CAPS,    KC.A,   KC.S,    KC.D,    KC.F,   KC.G,                                          KC.H,  KC.J,    KC.K,    KC.L, KC.SCLN, KC.QUOT,
        KC.LSFT,    KC.Z,   KC.X,    KC.C,    KC.V,   KC.B, KC.LALT, KC.LGUI,    KC.RGUI, KC.RALT,   KC.N,  KC.M, KC.COMM,  KC.DOT, KC.SLSH, KC.RSFT,
        KC.LCTL, KC.MINS, KC.EQL, KC.LEFT, KC.RGHT,                  KC.HOME,    KC.PGUP,           KC.UP, KC.DOWN, KC.LBRC, KC.RBRC, KC.RCTL,
        L1_SPC,  S_BSPC,   M_END,     H_PGDN,   C_DEL, L2_ENT
        ],
       [   #1
        KC.F1,     KC.F2,  KC.F3,   KC.F4,   KC.F5,   KC.F6,                                      KC.F7,   KC.F8, KC.F9,  KC.F10,  KC.F11,  KC.F12,
        KC.NO,     KC.NO,  KC.NO,   KC.NO,   KC.NO,   KC.NO,                                      KC.NO,   KC.P7, KC.P8,   KC.P9, KC.PMNS,   KC.NO,
        KC.NLCK, KC.SLCK, KC.INS, KC.PAUS, KC.PSCR,   KC.NO,                                    KC.PAST,   KC.P4, KC.P5,   KC.P6, KC.PPLS,   KC.NO,
        KC.TRNS,   KC.NO,  KC.NO,   KC.NO,   KC.NO,   KC.NO, KC.NO, KC.NO,    KC.TRNS, KC.TRNS, KC.PSLS,   KC.P1, KC.P2,   KC.P3, KC.PEQL, KC.TRNS,
        KC.TRNS,   KC.NO,  KC.NO,   KC.NO,   KC.NO,                 KC.NO,    KC.TRNS,                   KC.PCMM, KC.P0, KC.PDOT,   KC.NO, KC.TRNS,
        KC.TRNS, KC.NO, KC.NO,    KC.TRNS, KC.TRNS, KC.PENT
        ],
    [   #2
       KC.F13,   KC.F14, KC.F15, KC.F16,   KC.F17,  KC.F18,                                     KC.F19,   KC.F20,   KC.F21, KC.F22, KC.F23,    KC.F24,
     KC.NO,     KC.NO,  KC.NO,  KC.NO,  KC.VOLU,   KC.NO,                                      KC.NO,     KC.NO,   KC.NO,  KC.NO,  KC.NO,     KC.NO,
     KC.RESET,  KC.NO,  KC.NO,  KC.NO,  KC.MUTE,   KC.NO,                                      KC.NO, KC.BT_NXT, KC.BRIU,  KC.NO,  KC.NO,     KC.NO,
     KC.NO,     KC.NO,  KC.NO,  KC.NO,  KC.VOLD,   KC.NO, KC.TRNS, KC.TRNS,    KC.NO, KC.NO,   KC.NO, KC.BT_PRV, KC.BRID,  KC.NO,  KC.NO,     KC.NO,
     KC.RLD,    KC.NO,  KC.NO,  KC.NO,    KC.NO,                   KC.TRNS,    KC.NO,                     KC.NO,   KC.NO,  KC.NO,  KC.NO, KC.BT_CLR,
     KC.MPLY, KC.TRNS, KC.TRNS,    KC.NO, KC.NO, KC.TRNS
     ]
   ]
   # fmt:on

   if __name__ == '__main__':
       keyboard.go()
   @end

   then later i can take a look at what i had from before my custom layout 

** testing 
   first things first i checked was to see if i anything is wierd
   - see that it seams like the left half is shifted over to the left by a key n+6
   - ( )  iron it out so that i can get the pins correctly. 
   -- (x) first make a note of what the pins are in a list here using the mu python console
   -- (x) take a note in the required structure 
   -- (x) build it. 

*** The Coordmap 
    coord map came out to be 
    @code python 
    AdamCoordMap = [
        36, 37, 38, 39, 40, 41,                    0,  1,  2,  3,  4,  5,
        42, 43, 44, 45, 46, 47,                    6,  7,  8,  9, 10, 11,
        48, 49, 50, 51, 52, 53,                   12, 13, 14, 15, 16, 17,
        54, 55, 56, 57, 58, 59, 71, 66,   32, 30, 18, 19, 20, 21, 22, 23,
        60, 61, 62, 63, 64,         70,   31,         25, 26, 27, 28, 29,
                            69, 68, 67,   35, 34, 33
    ]
    @end

*** Keymap 
    I first started with 
    @code python
     AdamLayer0 = [
             KC.RESET,   KC.N1,    KC.N2,   KC.N3,   KC.N4,   KC.N5,                                        KC.N6,   KC.N7,   KC.N8,   KC.N9,   KC.N0,  KC.CAPS,
             KC.GRV,   KC.QUOT,  KC.COMM,  KC.DOT,    KC.P,    KC.Y,                                         KC.F,    KC.G,    KC.C,    KC.R,    KC.L,  KC.BSLS,
             KC.EQLS,     KC.A,     KC.O,    KC.E,    KC.U,    KC.I,                                         KC.D,    KC.H,    KC.T,    KC.N,    KC.S,  KC.MINS,
             KC.MPLY,  KC.SCLN,     KC.Q,    KC.J,    KC.K,    KC.X, KC.LSFT, KC.INS,    KC.PSCR, KC.RSFT,   KC.B,    KC.M,    KC.W,    KC.V,    KC.Z,  KC.SLSH,
             KC.VOLU,  KC.VOLD,  KC.MUTE, KC.LPRN, KC.LBRC,                   KC.TAB,    KC.HOME,                  KC.RBRC, KC.LPRN, KC.PGUP, KC.PGDN,    KC.NO,
                                                             KC.SPC,  KC.ENT, KC.TAB,    KC.END,  KC.ESC, KC.BSPC,
     ]
    
    @end
    And  found that i was able to wire everything else up as well 
    @code python
    
     AdamLayer1 = [
             Trns, Trns,    Trns, KC.N0, KC.PPLS,   Trns,                             Trns, KC.F10, KC.F11, KC.F12, Trns,  Trns,
             Trns, Trns,   KC.N7, KC.N8,   KC.N9,   Trns,                             Trns,  KC.F7,  KC.F8,  KC.F9, Trns,  Trns,
             Trns, Trns,   KC.N4, KC.N5,   KC.N6,   Trns,                             Trns,  KC.F4,  KC.F5,  KC.F6, Trns,  Trns,
             Trns, Trns,   KC.N1, KC.N2,   KC.N3,   Trns,  Trns, Trns,    Trns, Trns, Trns,  KC.F1,  KC.F2,  KC.F3, Trns,  Trns,
             Trns, Trns,    Trns,  Trns,    Trns,                Trns,    Trns,               Trns,   Trns,   Trns, Trns,  Trns,
                                                    Trns,  Trns, Trns,    Trns, Trns, Trns,
     ]
     AdamLayer2 = [
             Trns,    Trns,    Trns,    Trns,    Trns,   Trns,                             Trns,    Trns,    Trns,    Trns,    Trns,  Trns,
             Trns,    Trns,   KC.AT, KC.AMPR,    Trns,   Trns,                             Trns,  KC.TAB, AdamTAB,    Trns,    Trns,  Trns,
             Trns, KC.CIRC, KC.HASH, KC.ASTR,  KC.DLR,   Trns,                             Trns, KC.LEFT, KC.DOWN,   KC.UP, KC.RGHT,  Trns,
             Trns,    Trns,    Trns,    Trns,    Trns,   Trns,  Trns,    Trns, Trns, Trns, Trns,    Trns,    Trns,    Trns,    Trns,  Trns,
             Trns,    Trns,    Trns,    Trns,                   Trns,    Trns,             Trns,    Trns,    Trns,    Trns,    Trns,  Trns,
                                                 Trns,   Trns,  Trns,    Trns, Trns, Trns,
     ]
     AdamLayer3 = [
             Trns, Trns, Trns, Trns, Trns,   Trns,                            Trns, KC.F22,  KC.F23,  KC.F24, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,   Trns,                            Trns, KC.F19,  KC.F20,  KC.F21, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,   Trns,                            Trns, KC.F16,  KC.F17,  KC.F18, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,   Trns,  Trns, Trns,   Trns, Trns, Trns, KC.F13,  KC.F14,  KC.F15, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,                Trns,   Trns,               Trns,    Trns,    Trns, Trns,  Trns,
                                             Trns,  Trns, Trns,   Trns, Trns, Trns,
     ]
     AdamLayer4 = [
             Trns, Trns, Trns, Trns, Trns,   Trns,                             Trns, Trns, Trns, Trns, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,   Trns,                             Trns, Trns, Trns, Trns, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,   Trns,                             Trns, Trns, Trns, Trns, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,   Trns,  Trns, Trns,    Trns, Trns, Trns, Trns, Trns, Trns, Trns,  Trns,
             Trns, Trns, Trns, Trns, Trns,                Trns,    Trns,             Trns, Trns, Trns, Trns,  Trns,
                                             Trns,  Trns, Trns,    Trns, Trns, Trns,
     ]
     
     keymap = [
         AdamLayer0,
         AdamLayer1,
         AdamLayer2,
         AdamLayer3,
         AdamLayer4,
     ]
    @end

    With this was able to get everything to wire up and now everything works after the crash i had. 
